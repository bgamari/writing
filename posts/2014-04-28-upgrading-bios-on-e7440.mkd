---
title: Upgrading BIOS on Dell Latitude E7440
date: 2014-04-28
description: Creating a FreeDOS environment for upgrading firmware with a large update image
tags: bios, upgrade, linux
---

Modern computers have a lot of firmware, much of which is rather
tricky for non-Windows users to upgrade. My Dell Latitude E7440 is no
exception. While there are many well-documented
[options](https://wiki.archlinux.org/index.php/Flashing_BIOS_from_Linux)
for flashing the BIOS with FreeDOS, this computer is particularly
tricky as the upgrade executable weighs in at over 9 megabytes, larger
than even the largest `biosdisk` image.

I work around this by augmenting a FreeDOS image with a second
partition to hold the large update executable.

First we'll grab a FreeDOS boot image (specifically a 10 MB hard disk
image),

    $ wget http://www.fdos.org/bootdisks/autogen/FDSTD10.zip
    $ unzip FDSTD10.zip

Now we'll tack another 30 megabytes on the end of this image, using this
space for a new partition which will hold our updater,

    $ dd if=/dev/zero bs=1M count=30 of=zeros.img
    $ cat FDSTD10.IMG zeros.img > bios.img
    $ sudo fdisk /dev/loop0
    
        Command (m for help): p
    
    Disk /dev/loop0: 41 MB, 41811968 bytes
    16 heads, 63 sectors/track, 81 cylinders, total 81664 sectors
    Units = sectors of 1 * 512 = 512 bytes
    Sector size (logical/physical): 512 bytes / 512 bytes
    I/O size (minimum/optimal): 512 bytes / 512 bytes
    Disk identifier: 0x00000000
    
          Device Boot      Start         End      Blocks   Id  System
    /dev/loop0p1   *          63       19151        9544+   1  FAT12


    Command (m for help): n
    Partition type:
       p   primary (1 primary, 0 extended, 3 free)
       e   extended
    Select (default p): p
    Partition number (1-4, default 2): 2
    First sector (19152-81663, default 19152): 
    Using default value 19152
    Last sector, +sectors or +size{K,M,G} (19152-81663, default 81663): 
    Using default value 81663
    
    Command (m for help): w
    The partition table has been altered!
    
    Calling ioctl() to re-read partition table.
    
    WARNING: Re-reading the partition table failed with error 22: Invalid argument.
    The kernel still uses the old table. The new table will be used at
    the next reboot or after you run partprobe(8) or kpartx(8)
    Syncing disks.
    $ sudo losetup -d /dev/loop0

Next we'll create a filesystem on this new partition and add the
firmware image,

    $ sudo kpartx -v -a bios.img
    add map loop0p1 (252:0): 0 19089 linear /dev/loop0 63
    add map loop0p2 (252:1): 0 62512 linear /dev/loop0 19152
    $ sudo mkdosfs /dev/mapper/loop0p2
    mkfs.fat 3.0.26 (2014-03-07)
    unable to get drive geometry, using default 255/63
    $ sudo mount /dev/mapper/loop0p2 /tmp/floppy
    $ sudo cp ~/Downloads/E7440A08.exe /tmp/floppy
    $ sudo umount /tmp/floppy
    $ sudo kpartx -v -d bios.img
    del devmap : loop0p2
    del devmap : loop0p1
    loop deleted : /dev/loop0
    $ sudo cp bios.img /boot

Next we'll add an entry to the GRUB menu. The easiest way to
accomplish this on a Debian machine is to add the following to
`/etc/grub.d/40_custom` followed by running `update-grub`,
    
    menuentry "Flash BIOS" {
    linux16 /boot/memdisk
    initrd16 /boot/bios.img
    }

Finally, reboot and select the `Flash BIOS` entry in GRUB.

## references

 * https://wiki.archlinux.org/index.php/Flashing_BIOS_from_Linux
 * http://stackoverflow.com/questions/1419489/loopback-mounting-individual-partitions-from-within-a-file-that-contains-a-parti
 * http://www.fdos.org/bootdisks/
